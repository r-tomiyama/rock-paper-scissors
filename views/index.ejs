<!DOCTYPE html>
<script src="/socket.io/socket.io.js"></script>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>じゃんけん sisisin</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/destyle.css@1.0.15/destyle.css"/>
    <style>
      p {
        font-size: 1.5rem;
      }

      a {
        color: lightskyblue;
      }

      #wrapper {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }

      header {
        height: 15vh;
        background: linear-gradient(rgba(176, 224, 230, 0.7), rgba(176, 224, 230, 0.7)), url('../images/sisisin.jpg');
        background-size: 30px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 5vh;
      }

      h1 {
        font-size: 3rem;
        text-align: center;
        font-weight: bold;
      }

      #content {
        margin: 0 5vw;
      }

      #top {
        display: flex;
        justify-content: center;
      }

      #top .start-button {
        font-size: 2rem;
        font-weight: bold;
        padding: 3vh 5vw;
        border-radius: 75px;
        background-color: slategray;
        color: snow;
      }

      #message {
        margin: 2vh 0;
        text-decoration: underline;
        margin: 2vh 0;
      }

      #game-content {
        display: flex;
        justify-content: space-between;
        margin: 5vh 0;
      }

      #game-content .hand-label {
        margin: -4vh 0 4vh 0;
        text-align: center;
        font-weight: bold;
      }

      #game-content img {
        width: 90%;
        display: block;
        margin: 4vh auto 0 auto;
      }

      footer {
        margin: auto 1vw 1vw 2vh;
        font-size: 1rem;
        color: slategray;
      }

      .hidden {
        display: none !important;
      }

      .selected {
        border:khaki 10px solid;
        border-radius: 30px;
      }

      .opponent-selected {
        margin: 3vh 0;
        text-align: center;
      }

    </style>
  </head>
  <body>
    <div id="wrapper">
      <header>
        <h1>じゃんけん sisisin</h1>
      </header>

      <div id="content">
        <p id="message"></p>

        <div id="top">
          <input type="button" value="じゃんけんをする！" class="start-button" onclick="buttonClick()" />
        </div>

        <div id="game-content" class="hidden">
          <div id="rock-wrapper">
            <div id="rock">
              <img src="../images/rock.jpg" onclick="chooseHand('rock')" />
              <p class="hand-label">グー</p>
            </div>
          </div>
          <div id="scissor-wrapper">
            <div id="scissor">
              <img src="../images/scissor.jpg" onclick="chooseHand('scissor')" />
              <p class="hand-label">チョキ</p>
            </div>
          </div>
          <div id="paper-wrapper">
            <div id="paper">
              <img src="../images/paper.jpg" onclick="chooseHand('paper')" />
              <p class="hand-label">パー</p>
            </div>
          </div>
        </div>
      </div>

      <footer>
        <a href="https://www.pixiv.net/artworks/91732589" target="_blank">sisisin画像</a> Ⓒ sisisin CC BY-SA 4.0ライセンス
      </footer>
    </div>

    <script>
      let socket = io();
      let id;

      function buttonClick() {
        socket.emit("join");
      }

      function updateMessage(message) {
        document.getElementById("message").innerText = message;
      }

      function changeView(mode) {
        if (mode === "top") {
          document.getElementById("top").className = undefined;
          document.getElementById("game-content").className = "hidden";
        } else if (mode === "waiting") {
          document.getElementById("top").className = "hidden";
        } else if (mode === "playing") {
          document.getElementById("game-content").className = undefined;
        } else {
          // TODO
        }
      }

      function resetGame() {
        ["rock", "scissor", "paper"].forEach(h => {
          document.getElementById(h).className = undefined;
        });

        const opponentHands = document.getElementsByClassName("opponent-selected")
        for (var i = 0; opponentHands.length; i++) {
          opponentHands[i].remove();
        }
      }

      function chooseHand(hand) {
        socket.emit("choose", { hand: hand });
        updateMessage("対戦相手がsisisinを選ぶのを待ちます");
        document.getElementById(hand).className = "selected";
        // TODO: アニメーションつけたい
      }

      socket.on("reset", () => {
        changeView("top");
        resetGame();
        updateMessage("対戦相手がいなくなりました。次の対戦相手が来るのを待ちます。");
      });

      socket.on("error", (data) => {
        updateMessage(data.message);
      });

      socket.on("joined", (data) => {
        changeView("waiting");
        updateMessage("じゃんけんルームに入りました。対戦相手が来るのを待ちます。");
        id = data.id;
      });

      socket.on("start", () => {
        changeView("playing");
        updateMessage("対戦相手の準備が整いました！sisisinを選びましょう");
      });

      socket.on("done", (data) => {
        let pOpponentHand = document.createElement('p')
        pOpponentHand.innerText = "相手プレイヤーのsisisin"
        pOpponentHand.className = "opponent-selected";
        document.getElementById(`${data.opponentHand}-wrapper`).appendChild(pOpponentHand)

        // TODO: 結果表示にアニメーションつけたい
        let result;
        if (data.isDraw) {
          result = "引き分け";
        } else {
          if (data.winner === id) {
            result = "勝利";
          } else {
            result = "敗北";
          }
        }
        updateMessage(`${result}しました！ゲームを終了する場合はブラウザを閉じてください。`);

        setTimeout(() => {
          resetGame();

          // TODO: 相手がいなくなっていない場合にだけ表示させる
          updateMessage("次のゲームを始めます！sisisinを選びましょう。");
        }, 5000);
      });
    </script>
  </body>
</html>
